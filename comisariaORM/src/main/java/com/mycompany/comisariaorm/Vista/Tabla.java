/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.comisariaorm.Vista;

import com.mycompany.comisariaorm.Modelo.Matricula;
import com.mycompany.comisariaorm.Modelo.Sospechoso;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import ConsultasH2.ConsultaSospechoso;
import com.mycompany.comisariaorm.Controlador.Controlador;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Your Name <Antonio Martinez Diaz>
 */
public class Tabla extends javax.swing.JFrame implements MouseListener, TableModelListener {

    /**
     * Creates new form Tabla
     */
    private ModeloTabla modelo;//
    private static ArrayList<String> titulosList;

    public Tabla() {
        initComponents();
        construirTabla();
        Tsospechosos.addMouseListener(this);
        Tsospechosos.getModel().addTableModelListener(this);

    }

    private void iniciaMAtualizar(List<? extends Object> s, int columna, long id) {
        JDialog frame = new JDialog(this, "Actualiza", true);
        frame.setLocation(this.getX(), this.getY());
        ActualizarMul i = new ActualizarMul(id, columna);
        i.iniciaModelo(s, columna);
        frame.getContentPane().add(i);
        frame.pack();
        frame.setVisible(true);
        construirTabla();

        //se restaura el lisetner que se pierde cuando 
        //ejecutas el dialog
        restaurarEscucha();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TituloTablaSospechosos = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tsospechosos = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 948, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 227, Short.MAX_VALUE)
        );

        TituloTablaSospechosos.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        TituloTablaSospechosos.setText("Tabla  Sospechosos");

        jButton1.setText("Nuevo sospechoso");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Tsospechosos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Tsospechosos);

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(97, 97, 97)
                                .addComponent(TituloTablaSospechosos, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(TituloTablaSospechosos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(176, 176, 176))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JDialog frame = new JDialog(this, "Insertar", true);
        frame.setLocation(this.getX(), this.getY());
        Insertar i = new Insertar();
        frame.getContentPane().add(i);
        frame.pack();
        frame.setVisible(true);
        construirTabla();
        restaurarEscucha();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   
    }//GEN-LAST:event_jButton2ActionPerformed

    void limpiartabla() {
        int a = modelo.getRowCount() - 1;
        System.out.println(a);
        for (int i = a; i >= 0; i--) {
            System.out.println(i);
            modelo.removeRow(i);
        }
    }

    public void construirTabla() {
        titulosList = new ArrayList<>();
        titulosList.add("Id");
        titulosList.add("Nombre");
        titulosList.add("Apellidos");
        titulosList.add("Documentos");
        titulosList.add("Matriculas");
        titulosList.add("Domicilios");
        titulosList.add("Telefonos");
        titulosList.add("Correos");
        titulosList.add("");
        titulosList.add("");
        titulosList.add("");
        titulosList.add("");

        String titulos[] = new String[titulosList.size()];
        for (int i = 0; i < titulos.length; i++) {
            titulos[i] = titulosList.get(i);
        }

        Object[][] data = obtenerMatrizDatos(titulosList);
        construirTabla(titulos, data);
    }

    public void restaurarEscucha() {
        Tsospechosos.getModel().removeTableModelListener(this);
        Tsospechosos.getModel().addTableModelListener(this);
    }

    private Object[][] obtenerMatrizDatos(ArrayList<String> titulosList) {
        String informacion[][] = new String[Controlador.devolverSospechosos().size()][titulosList.size()];
        for (int x = 0; x < informacion.length; x++) {
            long id = Controlador.idSospechoso(x);
            informacion[x][Utilidades.ID] = Controlador.obtenerCampoMo("id", x);
            informacion[x][Utilidades.NOMBRE] = Controlador.obtenerCampoMo("nombre", x) + "";
            informacion[x][Utilidades.APELLIDOS] = Controlador.obtenerCampoMo("apellidos", x) + "";
            informacion[x][Utilidades.DOCUMENTO] = Controlador.obtenerCampoMo("documento", x) + "";
            informacion[x][Utilidades.MATRICULAS] = Controlador.obtenerCampoMul("matriculas", id);
            informacion[x][Utilidades.DOMICILIOS] = Controlador.obtenerCampoMul("domicilios", id);
            informacion[x][Utilidades.TELEFONOS] = Controlador.obtenerCampoMul("telefonos", id);
            informacion[x][Utilidades.CORREOS] = Controlador.obtenerCampoMul("correos", id);;
            informacion[x][Utilidades.DETALLES] = "PERFIL";
            informacion[x][Utilidades.BORRAR] = "EVENTO";
            informacion[x][Utilidades.FOTO] = "FOTO";
            informacion[x][Utilidades.COMPLICE] = "COMPLICE";
        }
        return informacion;
    }

    private void construirTabla(String[] titulos, Object[][] data) {
        modelo = new ModeloTabla(data, titulos);
        Tsospechosos.setModel(modelo);
        Tsospechosos.getColumnModel().getColumn(Utilidades.DETALLES).setCellRenderer(new GestionCeldas("icono"));
        Tsospechosos.getColumnModel().getColumn(Utilidades.BORRAR).setCellRenderer(new GestionCeldas("icono"));
        Tsospechosos.getColumnModel().getColumn(Utilidades.FOTO).setCellRenderer(new GestionCeldas("icono"));
        Tsospechosos.getColumnModel().getColumn(Utilidades.COMPLICE).setCellRenderer(new GestionCeldas("icono"));
        Tsospechosos.getColumnModel().getColumn(Utilidades.DETALLES).setPreferredWidth(60);
        Tsospechosos.getColumnModel().getColumn(Utilidades.BORRAR).setPreferredWidth(60);
    }

    private Long idTabla(int fila) {
        String id = (String) modelo.getValueAt(fila, 0);
        long Id = Long.parseLong(id);
        return Id;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        int fila = Tsospechosos.rowAtPoint(e.getPoint());
        int columna = Tsospechosos.columnAtPoint(e.getPoint());

        if (columna == Utilidades.DETALLES) {
            long id = idTabla(fila);
            JDialog frame = new JDialog(this, "Insertar", true);
            frame.setLocation(this.getX(), this.getY());
            Detalles d = new Detalles(id);
            frame.getContentPane().add(d);
            frame.pack();
            frame.setVisible(true);
            construirTabla();
            restaurarEscucha();

        } else if (columna == Utilidades.COMPLICE) {
            long id = idTabla(fila);
            JDialog frame = new JDialog(this, "Insertar", true);
            frame.setLocation(this.getX(), this.getY());
            Complices c = new Complices(idTabla(fila), Utilidades.COMPLICE);
            c.iniciaModelo(Controlador.devolverComplices(id));
            frame.getContentPane().add(c);
            frame.pack();
            frame.setVisible(true);
            construirTabla();
            restaurarEscucha();
            
        } else if (columna == Utilidades.BORRAR) {
            long id = idTabla(fila);
            modelo.removeRow(fila);
            ConsultaSospechoso.eliminarSospechoso(id);
            construirTabla();
            restaurarEscucha();

        } else if (columna == Utilidades.TELEFONOS) {
            if (Controlador.obtenerCampoMulB("telefonos", idTabla(fila)) != null) {
                iniciaMAtualizar(Controlador.obtenerCampoMulB("telefonos", idTabla(fila)), Utilidades.TELEFONOS, idTabla(fila));
            }
        } else if (columna == Utilidades.CORREOS) {
            if (Controlador.obtenerCampoMulB("correos", idTabla(fila)) != null) {
                iniciaMAtualizar(Controlador.obtenerCampoMulB("correos", idTabla(fila)), Utilidades.CORREOS, idTabla(fila));
            }
        } else if (columna == Utilidades.MATRICULAS) {
            if (Controlador.obtenerCampoMulB("matriculas", idTabla(fila)) != null) {
                iniciaMAtualizar(Controlador.obtenerCampoMulB("matriculas", idTabla(fila)), Utilidades.MATRICULAS, idTabla(fila));
            }
        } else if (columna == Utilidades.DOMICILIOS) {
            if (Controlador.obtenerCampoMulB("domicilios", idTabla(fila)) != null) {
                iniciaMAtualizar(Controlador.obtenerCampoMulB("domicilios", idTabla(fila)), Utilidades.DOMICILIOS, idTabla(fila));
            }
        } else if (columna == Utilidades.FOTO) {
            long id = idTabla(fila);
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.addChoosableFileFilter(filtro);
            chooser.setAcceptAllFileFilterUsed(false);
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    String ruta = chooser.getSelectedFile().getAbsolutePath();
                    if (Controlador.cargarFoto(id) != null) {
                        Controlador.BorraFoto(id);
                    }
                    Controlador.GuardarFotoSospechoso(id, ruta);

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                            "Se ha producido un error al introducir la foto.",
                            "Error entrada/salida",
                            JOptionPane.ERROR_MESSAGE);
                }

            }

        }

    }

    @Override
    public void mouseEntered(MouseEvent arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseExited(MouseEvent arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mousePressed(MouseEvent arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseReleased(MouseEvent arg0) {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tabla().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TituloTablaSospechosos;
    private static javax.swing.JTable Tsospechosos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        if (e.getColumn() == Utilidades.NOMBRE
                || e.getColumn() == Utilidades.APELLIDOS
                || e.getColumn() == Utilidades.DOCUMENTO) {

            String id = (String) modelo.getValueAt(e.getFirstRow(), 0);
            System.out.println(modelo.getValueAt(e.getFirstRow(), 0));
            Long Id = Long.parseLong(id);
            String cambio = (String) modelo.getValueAt(e.getFirstRow(), e.getColumn());
            Controlador.actualizarMo(Id, (Integer.valueOf(e.getColumn())), cambio);
        }

    }
}
